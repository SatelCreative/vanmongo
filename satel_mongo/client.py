from datetime import datetime
from typing import Any, Dict, Generic, Optional, Type, TypeVar

from motor.motor_asyncio import AsyncIOMotorClient
from pydantic import BaseModel, Field
from shortuuid import ShortUUID


class BaseDocument(BaseModel):
    """BaseDocument"""

    """Autogenerated _id"""
    object_id: Any = Field(alias="_id")
    """Short unique id"""
    id: str
    """Date last modified"""
    updated_at: datetime
    """Date created"""
    created_at: datetime


TContext = TypeVar("TContext", bound=BaseModel)
TDocument = TypeVar("TDocument", bound=BaseDocument)


class Client(Generic[TContext]):
    """Client"""

    db: Any
    context: Optional[TContext] = None

    def __init__(self, context: TContext = None):
        self.context = context
        # TODO
        self.db = AsyncIOMotorClient("mongodb://localhost:27017").test

    def use(
        self: "Client", Document: Type[TDocument]
    ) -> "Collection[TDocument, TContext]":
        return Collection[TDocument, TContext](client=self, Document=Document)


class Collection(Generic[TDocument, TContext]):
    """Collection"""

    client: Client[TContext]
    Document: Type[TDocument]

    def __init__(self, client: Client[TContext], Document: Type[TDocument]):
        self.client = client
        self.Document = Document

    async def find_one_by_id(self, id: str) -> Optional[TDocument]:
        raw = await self.client.db["test"].find_one({"id": id})
        return self.Document.parse_obj(raw) if raw else None

    async def create_one(self, document: Dict[str, Any]) -> TDocument:
        now = datetime.utcnow()
        # Keep same precision as mongo
        now = now.replace(microsecond=round(now.microsecond, -3))

        document.update(
            {
                "_id": "",  # Removed before insert
                "id": ShortUUID().random(length=10),
                "created_at": now,
                "updated_at": now,
            }
        )

        doc = self.Document.parse_obj(document)

        doc_dict = doc.dict(by_alias=True)
        doc_dict.pop("_id", None)  # Remove _id

        inserted_result = await self.client.db["test"].insert_one(doc_dict)
        doc.object_id = inserted_result.inserted_id  # Add generated _id

        return doc
